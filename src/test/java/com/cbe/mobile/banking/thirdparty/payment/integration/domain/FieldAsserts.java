package com.cbe.mobile.banking.thirdparty.payment.integration.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FieldAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFieldAllPropertiesEquals(Field expected, Field actual) {
        assertFieldAutoGeneratedPropertiesEquals(expected, actual);
        assertFieldAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFieldAllUpdatablePropertiesEquals(Field expected, Field actual) {
        assertFieldUpdatableFieldsEquals(expected, actual);
        assertFieldUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFieldAutoGeneratedPropertiesEquals(Field expected, Field actual) {
        assertThat(expected)
            .as("Verify Field auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFieldUpdatableFieldsEquals(Field expected, Field actual) {
        assertThat(expected)
            .as("Verify Field relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDataType()).as("check dataType").isEqualTo(actual.getDataType()))
            .satisfies(e -> assertThat(e.getIsUnique()).as("check isUnique").isEqualTo(actual.getIsUnique()))
            .satisfies(e -> assertThat(e.getMaxLength()).as("check maxLength").isEqualTo(actual.getMaxLength()))
            .satisfies(e -> assertThat(e.getMinLength()).as("check minLength").isEqualTo(actual.getMinLength()))
            .satisfies(e -> assertThat(e.getMinValue()).as("check minValue").isEqualTo(actual.getMinValue()))
            .satisfies(e -> assertThat(e.getMaxValue()).as("check maxValue").isEqualTo(actual.getMaxValue()))
            .satisfies(e -> assertThat(e.getIsRequired()).as("check isRequired").isEqualTo(actual.getIsRequired()))
            .satisfies(e -> assertThat(e.getSortOrder()).as("check sortOrder").isEqualTo(actual.getSortOrder()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFieldUpdatableRelationshipsEquals(Field expected, Field actual) {
        assertThat(expected)
            .as("Verify Field relationships")
            .satisfies(e -> assertThat(e.getFormUi()).as("check formUi").isEqualTo(actual.getFormUi()))
            .satisfies(e -> assertThat(e.getMetaData()).as("check metaData").isEqualTo(actual.getMetaData()));
    }
}
