package com.cbe.mobile.banking.thirdparty.payment.integration.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ResponseOutputAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResponseOutputAllPropertiesEquals(ResponseOutput expected, ResponseOutput actual) {
        assertResponseOutputAutoGeneratedPropertiesEquals(expected, actual);
        assertResponseOutputAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResponseOutputAllUpdatablePropertiesEquals(ResponseOutput expected, ResponseOutput actual) {
        assertResponseOutputUpdatableFieldsEquals(expected, actual);
        assertResponseOutputUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResponseOutputAutoGeneratedPropertiesEquals(ResponseOutput expected, ResponseOutput actual) {
        assertThat(expected)
            .as("Verify ResponseOutput auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResponseOutputUpdatableFieldsEquals(ResponseOutput expected, ResponseOutput actual) {
        assertThat(expected)
            .as("Verify ResponseOutput relevant properties")
            .satisfies(e -> assertThat(e.getOutputName()).as("check outputName").isEqualTo(actual.getOutputName()))
            .satisfies(e -> assertThat(e.getDataType()).as("check dataType").isEqualTo(actual.getDataType()))
            .satisfies(e -> assertThat(e.getResponseValuePath()).as("check responseValuePath").isEqualTo(actual.getResponseValuePath()))
            .satisfies(e -> assertThat(e.getResponseScope()).as("check responseScope").isEqualTo(actual.getResponseScope()))
            .satisfies(
                e -> assertThat(e.getTransferCoreMapping()).as("check transferCoreMapping").isEqualTo(actual.getTransferCoreMapping())
            )
            .satisfies(e -> assertThat(e.getIsLogicField()).as("check isLogicField").isEqualTo(actual.getIsLogicField()))
            .satisfies(
                e ->
                    assertThat(e.getConstantValueToCompare())
                        .as("check constantValueToCompare")
                        .isEqualTo(actual.getConstantValueToCompare())
            )
            .satisfies(
                e ->
                    assertThat(e.getOperatorToCompareValue())
                        .as("check operatorToCompareValue")
                        .isEqualTo(actual.getOperatorToCompareValue())
            )
            .satisfies(e -> assertThat(e.getIsRequired()).as("check isRequired").isEqualTo(actual.getIsRequired()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResponseOutputUpdatableRelationshipsEquals(ResponseOutput expected, ResponseOutput actual) {
        assertThat(expected)
            .as("Verify ResponseOutput relationships")
            .satisfies(e -> assertThat(e.getOperation()).as("check operation").isEqualTo(actual.getOperation()));
    }
}
