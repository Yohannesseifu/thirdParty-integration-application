package com.cbe.mobile.banking.thirdparty.payment.integration.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ThirdPartyIntegrationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertThirdPartyIntegrationAllPropertiesEquals(ThirdPartyIntegration expected, ThirdPartyIntegration actual) {
        assertThirdPartyIntegrationAutoGeneratedPropertiesEquals(expected, actual);
        assertThirdPartyIntegrationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertThirdPartyIntegrationAllUpdatablePropertiesEquals(
        ThirdPartyIntegration expected,
        ThirdPartyIntegration actual
    ) {
        assertThirdPartyIntegrationUpdatableFieldsEquals(expected, actual);
        assertThirdPartyIntegrationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertThirdPartyIntegrationAutoGeneratedPropertiesEquals(
        ThirdPartyIntegration expected,
        ThirdPartyIntegration actual
    ) {
        assertThat(expected)
            .as("Verify ThirdPartyIntegration auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertThirdPartyIntegrationUpdatableFieldsEquals(ThirdPartyIntegration expected, ThirdPartyIntegration actual) {
        assertThat(expected)
            .as("Verify ThirdPartyIntegration relevant properties")
            .satisfies(e -> assertThat(e.getIsDraft()).as("check isDraft").isEqualTo(actual.getIsDraft()))
            .satisfies(e -> assertThat(e.getIntegrationName()).as("check integrationName").isEqualTo(actual.getIntegrationName()))
            .satisfies(e -> assertThat(e.getCompanyName()).as("check companyName").isEqualTo(actual.getCompanyName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getIconPath()).as("check iconPath").isEqualTo(actual.getIconPath()))
            .satisfies(e -> assertThat(e.getEnabled()).as("check enabled").isEqualTo(actual.getEnabled()))
            .satisfies(e -> assertThat(e.getAccountNumber()).as("check accountNumber").isEqualTo(actual.getAccountNumber()))
            .satisfies(e -> assertThat(e.getMinimumAmount()).as("check minimumAmount").isEqualTo(actual.getMinimumAmount()))
            .satisfies(e -> assertThat(e.getMaximumAmount()).as("check maximumAmount").isEqualTo(actual.getMaximumAmount()))
            .satisfies(e -> assertThat(e.getCurrencyCode()).as("check currencyCode").isEqualTo(actual.getCurrencyCode()))
            .satisfies(
                e ->
                    assertThat(e.getPaymentConfirmationTemplate())
                        .as("check paymentConfirmationTemplate")
                        .isEqualTo(actual.getPaymentConfirmationTemplate())
            )
            .satisfies(
                e ->
                    assertThat(e.getPaymentSuccessTemplate())
                        .as("check paymentSuccessTemplate")
                        .isEqualTo(actual.getPaymentSuccessTemplate())
            )
            .satisfies(
                e -> assertThat(e.getPaymentErrorTemplate()).as("check paymentErrorTemplate").isEqualTo(actual.getPaymentErrorTemplate())
            )
            .satisfies(
                e -> assertThat(e.getIntegrationCategory()).as("check integrationCategory").isEqualTo(actual.getIntegrationCategory())
            )
            .satisfies(e -> assertThat(e.getVisiblity()).as("check visiblity").isEqualTo(actual.getVisiblity()))
            .satisfies(
                e ->
                    assertThat(e.getConfirmRecipientIdentity())
                        .as("check confirmRecipientIdentity")
                        .isEqualTo(actual.getConfirmRecipientIdentity())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertThirdPartyIntegrationUpdatableRelationshipsEquals(
        ThirdPartyIntegration expected,
        ThirdPartyIntegration actual
    ) {
        assertThat(expected)
            .as("Verify ThirdPartyIntegration relationships")
            .satisfies(e -> assertThat(e.getCategoryMenus()).as("check categoryMenus").isEqualTo(actual.getCategoryMenus()));
    }
}
