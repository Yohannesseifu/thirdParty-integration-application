package com.cbe.mobile.banking.thirdparty.payment.integration.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ApiIntegrationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApiIntegrationAllPropertiesEquals(ApiIntegration expected, ApiIntegration actual) {
        assertApiIntegrationAutoGeneratedPropertiesEquals(expected, actual);
        assertApiIntegrationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApiIntegrationAllUpdatablePropertiesEquals(ApiIntegration expected, ApiIntegration actual) {
        assertApiIntegrationUpdatableFieldsEquals(expected, actual);
        assertApiIntegrationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApiIntegrationAutoGeneratedPropertiesEquals(ApiIntegration expected, ApiIntegration actual) {
        assertThat(expected)
            .as("Verify ApiIntegration auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApiIntegrationUpdatableFieldsEquals(ApiIntegration expected, ApiIntegration actual) {
        assertThat(expected)
            .as("Verify ApiIntegration relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getUrl()).as("check url").isEqualTo(actual.getUrl()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getAuth()).as("check auth").isEqualTo(actual.getAuth()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getVersion()).as("check version").isEqualTo(actual.getVersion()))
            .satisfies(e -> assertThat(e.getTimeout()).as("check timeout").isEqualTo(actual.getTimeout()))
            .satisfies(e -> assertThat(e.getRetryRetries()).as("check retryRetries").isEqualTo(actual.getRetryRetries()))
            .satisfies(e -> assertThat(e.getRetryDelay()).as("check retryDelay").isEqualTo(actual.getRetryDelay()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApiIntegrationUpdatableRelationshipsEquals(ApiIntegration expected, ApiIntegration actual) {}
}
