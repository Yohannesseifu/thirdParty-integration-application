package com.cbe.mobile.banking.thirdparty.payment.integration.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RequestInputAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestInputAllPropertiesEquals(RequestInput expected, RequestInput actual) {
        assertRequestInputAutoGeneratedPropertiesEquals(expected, actual);
        assertRequestInputAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestInputAllUpdatablePropertiesEquals(RequestInput expected, RequestInput actual) {
        assertRequestInputUpdatableFieldsEquals(expected, actual);
        assertRequestInputUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestInputAutoGeneratedPropertiesEquals(RequestInput expected, RequestInput actual) {
        assertThat(expected)
            .as("Verify RequestInput auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestInputUpdatableFieldsEquals(RequestInput expected, RequestInput actual) {
        assertThat(expected)
            .as("Verify RequestInput relevant properties")
            .satisfies(e -> assertThat(e.getInputName()).as("check inputName").isEqualTo(actual.getInputName()))
            .satisfies(e -> assertThat(e.getInputType()).as("check inputType").isEqualTo(actual.getInputType()))
            .satisfies(e -> assertThat(e.getDataType()).as("check dataType").isEqualTo(actual.getDataType()))
            .satisfies(e -> assertThat(e.getTestValue()).as("check testValue").isEqualTo(actual.getTestValue()))
            .satisfies(e -> assertThat(e.getDefaultValue()).as("check defaultValue").isEqualTo(actual.getDefaultValue()))
            .satisfies(e -> assertThat(e.getValueSource()).as("check valueSource").isEqualTo(actual.getValueSource()))
            .satisfies(e -> assertThat(e.getIsEncoded()).as("check isEncoded").isEqualTo(actual.getIsEncoded()))
            .satisfies(e -> assertThat(e.getMaxLength()).as("check maxLength").isEqualTo(actual.getMaxLength()))
            .satisfies(e -> assertThat(e.getMinLength()).as("check minLength").isEqualTo(actual.getMinLength()))
            .satisfies(e -> assertThat(e.getMinValue()).as("check minValue").isEqualTo(actual.getMinValue()))
            .satisfies(e -> assertThat(e.getMaxValue()).as("check maxValue").isEqualTo(actual.getMaxValue()))
            .satisfies(e -> assertThat(e.getValidationPattern()).as("check validationPattern").isEqualTo(actual.getValidationPattern()))
            .satisfies(e -> assertThat(e.getIsRequired()).as("check isRequired").isEqualTo(actual.getIsRequired()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestInputUpdatableRelationshipsEquals(RequestInput expected, RequestInput actual) {
        assertThat(expected)
            .as("Verify RequestInput relationships")
            .satisfies(e -> assertThat(e.getOperation()).as("check operation").isEqualTo(actual.getOperation()));
    }
}
